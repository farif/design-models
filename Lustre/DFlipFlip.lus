node Flipflop(D: bool; clk: bool) returns (Q, Q1: bool);
let
    Q = if clk then D 
        else Delay(Q);
    Q1 = not Q;
    -- Flipflop was remain (Q=true) iff clk and D pulse happended followed by no clk pulse.
    check Since(not clk, clk and D) => Q;    
tel

node RisingEdge(clk: bool) returns (RisingEdge: bool);
let
    RisingEdge = false -> not pre clk and clk; 
tel

node Delay(Q: bool) returns (Q_pre: bool);
let
    Q_pre = false -> pre Q;
tel

node Since(X, Y : bool) returns (Z : bool);
let
  Z =  Y or (X and (false -> pre Z));
tel

-- node Flipflop2( D: bool; clk: bool ) returns ( Q: bool );
-- let
--     Q = if RisingEdge(clk) then D 
--         else Delay(Q);
-- tel


-- node Flipflop1( D: bool; clk: bool ) returns ( Q: bool );
-- let
--     Q = Multiplexer(clk, D, Delay(Q));
-- tel

-- node Multiplexer( X, Y, Z: bool ) returns ( Q: bool);
-- let
--     Q = (X and Y) or (not X and Z);
-- tel

-- node Obs( D: bool; clk: bool ) returns ( Q: bool );
-- let
--     Q = (Flipflop(D, clk) =  Flipflop2(D, clk));
--     check  Q;
-- tel