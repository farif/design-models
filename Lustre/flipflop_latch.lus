-- D Flip-Flop Lustre Model
node D_FlipFlop(D, clk: bool) 
returns (Q0,Q1: bool);
var posedge: bool;
let
  posedge = RisingEdge(clk);
  (Q0,Q1) = SR_Latch(not D and posedge, D and posedge);
  -- It is always the case that after start the flip-flop remains bistable.
  --%PROPERTY (Step(Q0) > 0 and D) => Q0 <> Q1 ; 
tel


node RisingEdge(clk: bool) returns (o: bool);
let
    o = false -> clk and not (pre clk);
tel

-- D Latch Lustre Model
node D_Latch(D, EN: bool) 
returns (Q0,Q1: bool);
let
  (Q0,Q1) = SR_Latch(not D and EN, D and EN);
  -- It is always the case that after start the flip-flop remains bistable.
  --%PROPERTY (Step(Q0) > 0 and D) => Q0 <> Q1 ; 
tel

-- SR Latch Lustre Model
node SR_Latch(S, R: bool) 
returns (Q0,Q1: bool);
let
  Q0 = false -> NOR (R, pre Q1);
  Q1 = false -> NOR (S, pre Q0);
  -- It is always the case that after start the flip-flop remains bistable.
  --%PROPERTY (Step(Q0) > 0 and NOR(S,R)) => Q0 <> Q1 ; 
tel


-- Boolean NOR operand
node NOR(P, Q: bool) 
returns (Z: bool);
let
  Z = not (P or Q) ;
tel

-- State counter
node Step (p: bool) 
returns (r: int);
let   
    r = 0 -> (pre r + 1);
tel