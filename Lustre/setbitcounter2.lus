node SetBitCounter(i: uint32) returns (o: uint32);
(*@contract
  assume i >= (uint32 0) and i <=  (uint32 255) ;
  guarantee o >= (uint32 0) and o <=  (uint32 8) ;
*)
var  x0:uint32;
var  x1:uint32;
var  x2:uint32;
var  x3:uint32;
var  x4:uint32;
let

  x0 = (((uint32 i) rsh (uint32 1)) && (uint32 1431655765) +  ((uint32 i) && (uint32 1431655765)));
  x1 = ((x0 rsh (uint32 2)) && (uint32 858993459)) +  (x0 && (uint32 858993459));
  x2 = ((x1 rsh (uint32 4)) && (uint32 252645135)) +  (x1 && (uint32 252645135));
  x3 = ((x2 rsh (uint32 8)) && (uint32 16711935)) +  (x2 && (uint32 16711935));
  x4 = ((x3 rsh (uint32 16)) && (uint32 65535)) +  (x2 && (uint32 65535));
  o = x4;    
tel

node imported RandInt() returns (z: int) ;
(*@contract
  guarantee z >= 0 and z = 255 ;
*)

node TestSetBitCounter(i: int) returns (o: uint32);
let
    o = SetBitCounter(uint32 RandInt());
    check o = (uint32 8);
tel


--   x = (x & 0x55555555) + ((x >> 1) & 0x55555555);
--   x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
--   x = (x & 0x0F0F0F0F) + ((x >> 4) & 0x0F0F0F0F);
--   x = (x & 0x00FF00FF) + ((x >> 8) & 0x00FF00FF);
--   x = (x & 0x0000FFFF) + ((x >> 16)& 0x0000FFFF);

-- OR

--   x = ((x >> 1) & 0b01010101010101010101010101010101)
--      + (x       & 0b01010101010101010101010101010101);
--   x = ((x >> 2) & 0b00110011001100110011001100110011)
--      + (x       & 0b00110011001100110011001100110011); 
--   x = ((x >> 4) & 0b00001111000011110000111100001111)
--      + (x       & 0b00001111000011110000111100001111); 
--   x = ((x >> 8) & 0b00000000111111110000000011111111)
--      + (x       & 0b00000000111111110000000011111111); 
--   x = ((x >> 16)& 0b00000000000000001111111111111111)
--      + (x       & 0b00000000000000001111111111111111); 
