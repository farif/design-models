/* 
                      ______________
                     |              |
        req[3:0] --> |              |
            clk  --> |    Arbiter   |--> gnt[3:0]
            rst  --> |              |--> op_error
        opcode   --> |              |
                     |______________|

        opcode \in {NOP, FORCE0, ..., FORCE3, A_OFF, A_ON}

*/
typedef enum logic[2:0] {NOP, FORCE0, FORCE1, FORCE2, FORCE3, A_OFF, A_ON} t_opcode; 

module fv_arbiter(clk, rst, req, opcode, gnt, op_error);
    
    input logic[3:0] req;
    input t_opcode opcode;
    input clk, reset;
    
    output logic[3:0] gnt;
    output logic op_error;

    //1. Each grant is preceded a request / Without a request no grant is served?
    //2. An incorrect opcode input always results in an error state (op_error == 1)
    //3. One request is accepted/served at a time
    //4. ? Only 4 request are queued
    //5. Opcode has to be of a valid type or within defined enumerated range
    //6. If request_i is waiting and FORCE_i is provided then in the next clock cycle grant_i is served
    //7. A_OFF serves no grants (i.e gnt remains 0 onwards)
    //8. Grants are only servered if A_ON is true
    //9. If opcode == NOP then request are served in the order they have arrived.
end module
