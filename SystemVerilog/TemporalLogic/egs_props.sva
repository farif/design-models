module demo_01_impl (input wire clock);
	wire reset;
	wire a, b;

	//     01234567890123456789
	seq #("-_____-____-________") seq_r (clock, reset);
	seq #("_--___-___-______-__") seq_a (clock, a);
	seq #("__--__-__________-__") seq_b (clock, b);

	default clocking @(posedge clock); endclocking
	default disable iff (reset);

	// in the cycle after a, b must be high
	assert property (a |=> b);
endmodule

module demo_02_delay (input wire clock);
	wire reset;
	wire a, b;

	//     0123456789012345678901
	seq #("-_____-_______________") seq_r (clock, reset);
	seq #("_-____-_______-_______") seq_a (clock, a);
	seq #("___-__-__________-____") seq_b (clock, b);

	default clocking @(posedge clock); endclocking
	default disable iff (reset);

	// in any cycle when a is high, b must be high 1 to 2 cycles later
	assert property (a |-> ##[1:2] b);
endmodule

module demo_03_consecutive (input wire clock);
	wire reset;
	wire a, b, c;

	//     01234567890123456789
	seq #("-_______-___________") seq_r (clock, reset);
	seq #("_--___-_______-_____") seq_a (clock, a);
	seq #("__--___-________--__") seq_b (clock, b);
	seq #("____-_____________-_") seq_c (clock, c);

	default clocking @(posedge clock); endclocking
	default disable iff (reset);

	// after a goes high, b must be high for 2 cycles followed 1 cycle later by c
	assert property ($rose(a) |=> b[*2] ##1 c);
endmodule